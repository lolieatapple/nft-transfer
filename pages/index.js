import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { Button, Card, Divider, Input, message, Space } from 'antd'
import TextArea from 'antd/lib/input/TextArea'
import Wallet from '../utils/Wallet'
import { useState } from 'react';
const erc1155Abi = require('../contracts/ERC1155.abi.json');
const multiSendAbi = require('../contracts/MultiSend1155.abi.json');
const multiSendSCAddr = '0x679C8aE0D516e3e6413B8B151a62aa01343B6a4f';

export default function Home() {
  const [wallet, setWallet] = useState({});
  const [scAddr, setScAddr] = useState();
  const [tokenId, setTokenId] = useState();
  const [users, setUsers] = useState();

  return (
    <div className={styles.container}>
      <Head>
        <title>ERC-1155 Airdrop</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Wallet wallet={wallet} setWallet={setWallet} />
      <main className={styles.main}>
        <h1 className={styles.title}>
         ERC-1155 Airdrop
        </h1>
        <Divider />
        <Card>
        <Button onClick={()=>{
          wallet.connect();
        }} type="primary">
          {
            !wallet.connected ? 'Connect Wallet' : wallet.address
          }
          </Button>
        <Divider />
        <Space>
          ERC1155 SC Addr:
          <Input value={scAddr} onChange={e=>setScAddr(e.target.value)} />
          <Button type="primary" disabled={!scAddr || !wallet.web3} onClick={async ()=>{
            try {
              const sc = new wallet.web3.eth.Contract(erc1155Abi, scAddr);
              const ret = await sc.methods.setApprovalForAll(multiSendSCAddr, true).send({from: wallet.address});
              if (ret.status) {
                message.success("Success, txHash:" + ret.transactionHash);
              } else {
                message.error("Failed, txHash:" + ret.transactionHash);
              }
            } catch (error) {
              message.error('Failed' + error.message);
            }
            
          }}>Approve</Button>
        </Space>
        <Divider />
        <Space>
          Token ID:
          <Input value={tokenId} onChange={e=>setTokenId(e.target.value)} />
        </Space>
        <Divider />
        <p>User Addresses:</p>
        <TextArea style={{ height: 120 }} placeholder={
`Place address in each line(max 400 per time), such as:
0x4Cf0A877E906DEaD748A41aE7DA8c220E4247D9e
0x4Cf0A877E906DEaD748A41aE7DA8c220E4247D9e
0x4Cf0A877E906DEaD748A41aE7DA8c220E4247D9e
0x4Cf0A877E906DEaD748A41aE7DA8c220E4247D9e
0x4Cf0A877E906DEaD748A41aE7DA8c220E4247D9e
`}
            value={users}
            onChange={e=>setUsers(e.target.value)}
           />
        <Divider />
        <Button type="primary" disabled={!tokenId || !users} onClick={async ()=>{
          try {
            const sc = new wallet.web3.eth.Contract(multiSendAbi, multiSendSCAddr);
            const _users = users.split('\n').map(v=>v.trim()).filter(v=>v.length > 20);
            console.log('_users', _users);
            const ret = await sc.methods.airdrop(scAddr, tokenId, _users).send({from: wallet.address});
            if (ret.status) {
              message.success("Success, txHash:" + ret.transactionHash);
            } else {
              message.error("Failed, txHash:" + ret.transactionHash);
            }
          } catch (error) {
            message.error('Failed' + error.message);
          }
        }}>Send</Button>
        </Card>
      </main>

      <footer className={styles.footer}>
        <a
          href="mailto:molin@wanchain.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '} MoLin
        </a>
      </footer>
    </div>
  )
}
